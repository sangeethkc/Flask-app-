name: Deploy Flask Application to EC2

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        run: echo ${{ secrets.DOCKER_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/flask-app:latest ./app

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/flask-app:latest
          echo "Image pushed to Docker Hub"

  install-docker:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Set up SSH key
        run: |
          echo "$EC2_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
        env:
          EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}

      - name: Install Docker on EC2
        run: |
          ssh -t -o StrictHostKeyChecking=no -i private_key.pem ubuntu@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            sudo apt update
            sudo apt install docker.io -y
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker ubuntu
          EOF

      - name: Clean up temporary SSH key
        run: rm private_key.pem

  deploy-container:
    runs-on: ubuntu-latest
    needs: install-docker

    steps:
      - name: Set up SSH key
        run: |
          echo "$EC2_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
        env:
          EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}

      - name: Deploy Docker container on EC2
        run: |
          ssh -t -o StrictHostKeyChecking=no -i private_key.pem ubuntu@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            # Pull the latest container image from Docker Hub
            docker pull ${{ secrets.DOCKER_USERNAME }}/flask-app:latest

            # Stop and remove any existing container
            docker stop flask-app || true
            docker rm flask-app || true

            # Run the updated container
            docker run -d --name flask-app -p 80:5000 ${{ secrets.DOCKER_USERNAME }}/flask-app:latest
          EOF

      - name: Clean up temporary SSH key
        run: rm private_key.pem
